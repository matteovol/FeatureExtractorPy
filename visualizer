#!/usr/bin/env python

import argparse
import aubio
import matplotlib.pyplot as plt
import numpy as np
from pydub import AudioSegment, playback
from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
import threading
import time
from converter import Converter
import plotter


currentTime = lambda: int(round(time.time() * 1000))


def plotter_(tabX, tabY, line):
    if line == []:
        plt.ion()
        fig = plt.figure(figsize=(13, 6), num=0)
        ax = fig.add_subplot(111)
        line, = ax.plot(tabX, tabY, '-o', alpha=0.8)
        plt.show()

    line.set_ydata(tabY)

    if np.min(tabY) <= line.axes.get_ylim()[0] or np.max(tabY) >= line.axes.get_ylim()[1]:
        plt.ylim([np.min(tabY) - np.std(tabY),np.max(tabY) + np.std(tabY)])

    plt.pause(0.005)
    return line


def play(file):
    time.sleep(0.1)
    song = AudioSegment.from_wav(file)
    playback.play(song)


def argumentParsing():
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="name of the file you want to analyze")
    parser.add_argument("-m", action="store_const", dest="m", const=True, default=False, help="display data with matplotlib")
    parser.add_argument("-qt", action="store_const", dest="qt", const=True, default=False, help="display data with pyqtgraph")
    parser.add_argument("-p", action="store_const", dest="p", const=False, default=True,  help="don't play sound when showing data")
    return parser.parse_args()


def audioProcess(file):
    # Open audio file to get samplerate and duration of the track then close it
    s = aubio.source(file)
    samplerate = s.samplerate
    s.close()

    # I want to update the plot 20 times per second, so hopSize is the number of sample aubio should send me
    sampleSize = samplerate // 20

    # Reopen the file with a new hopSize according to its samplerate
    s = aubio.source(file, hop_size=sampleSize)

    pitchOutput = aubio.pitch("default", 4096, sampleSize, s.samplerate)
    pitchOutput.set_unit("midi")
    pitchOutput.set_tolerance(0.8)

    return sampleSize, s


def main():
    # Argument parsing
    args = argumentParsing()
    #print(args)

    # Convert file from other format to wav to handle 
    file = ""
    if args.file.split(".")[-1] != "wav":
        file = Converter(args.file).convert("wav")
    else:
        file = args.file

    sampleSize, s = audioProcess(file)

    # Play music of another thread because pydub is blocking, another method is probably better
    # but this is what I got
    if args.p is True:
        t = threading.Thread(target=lambda: play(file))
        t.start()

    if args.qt is True:
        plotter.QtPlotter(s, sampleSize)
        return


if __name__ == "__main__":
    main()
