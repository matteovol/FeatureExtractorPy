#!/usr/bin/env python

import argparse
import aubio
import numpy as np
from pydub import AudioSegment, playback
import threading
import time
from converter import Converter
import plotter


currentTime = lambda: int(round(time.time() * 1000))


def play(file):
    # Play sound
    time.sleep(0.1)
    song = AudioSegment.from_wav(file)
    playback.play(song)


def argumentParsing():
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="name of the file you want to analyze")
    parser.add_argument("-qt", action="store_const", dest="qt", const=True, default=True, help="display data with pyqtgraph")
    parser.add_argument("-p", action="store_const", dest="p", const=False, default=True,  help="don't play sound when showing data")
    return parser.parse_args()


def audioProcess(file):
    # Open audio file to get samplerate and duration of the track then close it
    s = aubio.source(file)
    samplerate = s.samplerate
    s.close()

    # I want to update the plot 20 times per second, so hopSize is the number of sample aubio should send me
    sampleSize = samplerate // 20

    # Reopen the file with a new hopSize according to its samplerate
    s = aubio.source(file, hop_size=sampleSize)

    pitchOutput = aubio.pitch("default", 4096, sampleSize, s.samplerate)
    pitchOutput.set_unit("midi")
    pitchOutput.set_tolerance(0.8)

    return sampleSize, s


def main():
    # Argument parsing
    args = argumentParsing()
    #print(args)

    # Convert file from other format to wav to handle mp3 and ogg
    file = ""
    if args.file.split(".")[-1] != "wav":
        file = Converter(args.file).convert("wav")
    else:
        file = args.file

    # Get the size of one sample and a callable to get samples regularly
    sampleSize, s = audioProcess(file)

    # Play music of another thread because pydub is blocking, another method is probably better
    # but I don't know how
    if args.p is True:
        t = threading.Thread(target=lambda: play(file))
        t.start()

    # Plot samples thanks to pyqtgraph
    if args.qt is True:
        plotter.QtPlotter(s, sampleSize)
        return

    t.join()


if __name__ == "__main__":
    main()
